## On this week - Building a Minimal ELF Binary Loader (and understanding the kernel–user boundary)

1.  Book: _ Linkers and Loaders _ by John Levine

    -   This book demystifies how binaries actually run—linking, relocation, symbol resolution, dynamic loaders, memory mapping.
    -   It is the book to understand everything from ELF internals to shared libraries.
        Start with Chapters 1–6 — enough to guide your own binary loading implementation.

-   Why all these? understand how binaries are built and executed. This is not just reading; this is architectural knowledge of how everything starts.

2. Repo(rust + asm + c):[minimal elf](https://github.com/tchajed/minimal-elf.git)

### Clone it.

```
bash
git clone https://github.com/tchajed/minimal-elf.git elf

```

Understand how it parses ELF headers, maps segments, jumps to entry point.

This repo bridges book theory to executable practice. Once you understand it, write your own.

#### Project: Write Your Own Minimal ELF Loader in C \_

\*\* No libc, no execve(). You open a binary with open(), read ELF headers, allocate memory, load segments, map permissions, and then jmp to entry point.

Bonus: Accept a filename and run it from your loader.

Milestones:

Day 1–2: Parse ELF64 headers manually from disk
Day 3–4: Map segments (.text, .data, .bss) into memory
Day 5: Set up stack (argv, envp, auxv) and jump to entry point
Day 6–7: Add dynamic linking or symbol resolution (optional but intense)

Expected learnings:

-   ELF internals: sections vs segments, headers, entry point
    System calls: mmap(), brk(), read(), open(), close(), execve() (in disallowed ways)
-   Stack layout: what happens before main()
-   Loader-to-binary contract: what does a binary expect when it runs?

<u> What You Will Have Built </u>

-   A working ELF binary loader written in C
-   A good understanding of ELF internals, linking, segment loading

This forces you to simulate what execve would have done, and see if your loader can fully boot the binary.
How to Structure

i) Set up, read Chapters 1–2 of the book, clone & build the repo

ii) Analyze ELF headers in hex + implement ELF header parsing

iii) Implement segment loading (read + mmap pages)
iv) Handle .bss, memory zeroing, and permissions
v) Prepare stack (argv/envp), jump to entry point

vi) Debug with GDB, add error handling
vii) Stretch: dynamic symbols / relocations, or self-document

<u style="font-weight:bold">Tools You'll Use </u>

    * readelf -a bin *

    * objdump -d bin *

-   GDB to debug entry point behavior

-   strace to see what your loader would normally do

-   Manual system calls from C (possibly inline asm for jmp)

TL;DR:

Book: Linkers and Loaders by John Levine (chapters 1–6)
Repo: Clone and dissect minimal elf
Build: Your own ELF loader in C
